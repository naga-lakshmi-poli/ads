#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>
#define INF INT_MAX 
struct AdjListNode {
int dest;
int weight;
struct AdjListNode* next;
};
struct AdjList {
struct AdjListNode* head;
};
struct Graph {
int V;
struct AdjList* array;
};
struct AdjListNode* newAdjListNode(int dest, int weight) {
struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
newNode->dest = dest;
newNode->weight = weight;
newNode->next = NULL;
return newNode;
}
struct Graph* createGraph(int V) {
struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
graph->V = V;
graph->array = (struct AdjList*)malloc(V * sizeof(struct AdjList));
for (int i = 0; i < V; ++i)
graph->array[i].head = NULL;
return graph;
}
void addEdge(struct Graph* graph, int src, int dest, int weight) {
struct AdjListNode* newNode = newAdjListNode(dest, weight);
newNode->next = graph->array[src].head;
graph->array[src].head = newNode;
newNode = newAdjListNode(src, weight);
newNode->next = graph->array[dest].head;
graph->array[dest].head = newNode;

}
int minDistance(int dist[], bool sptSet[], int V) {
int min = INF, min_index;
for (int v = 0; v < V; v++)
if (!sptSet[v] && dist[v] <= min)
min = dist[v], min_index = v;
return min_index;
}
void dijkstraList(struct Graph* graph, int src) {
int V = graph->V;
int dist[V];
bool sptSet[V];
for (int i = 0; i < V; i++) {
dist[i] = INF;
sptSet[i] = false;
}
dist[src] = 0;
for (int count = 0; count < V - 1; count++) {
int u = minDistance(dist, sptSet, V);
sptSet[u] = true;
struct AdjListNode* crawl = graph->array[u].head;
while (crawl != NULL) {
int v = crawl->dest;
if (!sptSet[v] && dist[u] != INF && dist[u] + crawl->weight < dist[v])
dist[v] = dist[u] + crawl->weight;
crawl = crawl->next;
}
}
printf("Vertex \t\t Distance from Source\n");
for (int i = 0; i < V; i++)
printf("%d \t\t %d\n", i, dist[i]);
}
int main() {
int V, E, u, v, w;
printf("Enter the number of vertices: ");
scanf("%d", &V);
struct Graph* graph = createGraph(V);
printf("Enter the number of edges: ");
scanf("%d", &E);
printf("Enter the edges in the format (u v w), where u and v are vertex indices (0-based) and w is the weight:\n");
for (int i = 0; i < E; i++) {
scanf("%d %d %d", &u, &v, &w);

addEdge(graph, u, v, w);
}
int src;
printf("Enter the source vertex: ");
scanf("%d", &src);
dijkstraList(graph, src);
for (int i = 0; i < V; i++) {
struct AdjListNode* current = graph->array[i].head;
while (current != NULL) {
struct AdjListNode* temp = current;
current = current->next;
free(temp);
}
}
free(graph->array);
free(graph);
return 0;
}
Output:
Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges in the format (u v w), where u and v are vertex indices (0-based) and w is the weight:
0 1 10
0 4 5
1 2 1
2 3 4
3 2 4
4 1 3
Enter the source vertex: 0
Vertex            Distance from Source
0                       0
1                       8
2                       9
3                       13
4                        5
