#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>
#define INF INT_MAX 
int minDistance(int dist[], bool sptSet[], int V) {
int min = INF, min_index;
for (int v = 0; v < V; v++)
if (!sptSet[v] && dist[v] <= min)
min = dist[v], min_index = v;
return min_index;
}
void dijkstraMatrix(int** graph, int src, int V) {
int dist[V]; 
bool sptSet[V];
for (int i = 0; i < V; i++) {
dist[i] = INF;
sptSet[i] = false;
}
dist[src] = 0;
for (int count = 0; count < V - 1; count++) {
int u = minDistance(dist, sptSet, V);
sptSet[u] = true; 

for (int v = 0; v < V; v++)
if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v])
dist[v] = dist[u] + graph[u][v];
}
printf("Vertex \t\t Distance from Source\n");
for (int i = 0; i < V; i++)
printf("%d \t\t %d\n", i, dist[i]);
}
int main() {
int V, E, u, v, w;
printf("Enter the number of vertices: ");
scanf("%d", &V);
int** graph = (int**)malloc(V * sizeof(int*));
for (int i = 0; i < V; i++) {
graph[i] = (int*)malloc(V * sizeof(int));
for (int j = 0; j < V; j++) {
graph[i][j] = 0;
}
}
printf("Enter the number of edges: ");
scanf("%d", &E);
printf("Enter the edges in the format (u v w), where u and v are vertex indices (0-based) and w is the weight:\n");
for (int i = 0; i < E; i++) {
scanf("%d %d %d", &u, &v, &w);
graph[u][v] = w;
graph[v][u] = w; 
}
int src;
printf("Enter the source vertex: ");
scanf("%d", &src);
dijkstraMatrix(graph, src, V);
for (int i = 0; i < V; i++) {
free(graph[i]);
}
free(graph);
return 0;
}
output:
Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges in the format (u v w), where u and v are vertex indices (0-based) and w is the weight:
0 1 10
0 4 5
1 2 1
2 3 4
3 2 6
4 1 3
Enter the source vertex: 1
Vertex Distance from Source
0 8
1 0
2 1
3 7
4 3
Souce vertex:0
Vertex Distance from Source
0 0
1 8
2 9
3 12
